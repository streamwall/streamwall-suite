# Streamwall Production Docker Compose
# This file contains production-specific overrides and configurations
#
# Usage:
#   docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#   OR use: make prod-up
#
# Production considerations:
#   - All services run with 'unless-stopped' restart policy
#   - Healthchecks with appropriate intervals
#   - Resource limits defined
#   - Production-grade logging
#   - No volume mounts for source code
#   - Security hardening

services:
  # PostgreSQL Database - Production config
  postgres:
    restart: always
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_password
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    # Remove port exposure in production - access only within network
    ports: []
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis - Production config
  redis:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    # Remove port exposure in production
    ports: []
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --dir /data
      --dbfilename dump.rdb

  # StreamSource API - Production config
  streamsource:
    image: ${DOCKER_REGISTRY:-ghcr.io}/streamwall/streamsource:${STREAMSOURCE_VERSION:-latest}
    restart: always
    profiles: ["production"]
    environment:
      - RAILS_ENV=production
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_LEVEL=info
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY_BASE_FILE=/run/secrets/secret_key_base
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - STREAMSOURCE_API_KEY_FILE=/run/secrets/api_key
      # Production settings
      - FORCE_SSL=true
      - WEB_CONCURRENCY=${WEB_CONCURRENCY:-3}
      - RAILS_MAX_THREADS=${RAILS_MAX_THREADS:-5}
      - BOOTSNAP_CACHE_DIR=/tmp/bootsnap-cache
      # Security headers
      - SECURE_HEADERS=true
      - HSTS_MAX_AGE=31536000
    secrets:
      - secret_key_base
      - jwt_secret
      - api_key
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - streamsource_storage:/rails/storage
      - streamsource_log:/rails/log
      - streamsource_tmp:/rails/tmp
    # Use multi-stage build target for production
    build:
      context: ./streamsource
      target: production
    command: bundle exec puma -C config/puma.rb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service=streamsource"

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    restart: always
    profiles: ["production"]
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - nginx_certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
      - acme_challenge:/var/www/.well-known/acme-challenge:ro
    depends_on:
      streamsource:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service=nginx"

  # Livestream Link Monitor - Production
  livestream-monitor:
    image: ${DOCKER_REGISTRY:-ghcr.io}/streamwall/livestream-monitor:${MONITOR_VERSION:-latest}
    restart: always
    profiles: ["production"]
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      # Secrets from files
      - DISCORD_TOKEN_FILE=/run/secrets/discord_token
      - STREAMSOURCE_API_KEY_FILE=/run/secrets/api_key
      # Production URLs
      - STREAMSOURCE_API_URL=http://streamsource:3000/api/v1
      # Performance tuning
      - NODE_OPTIONS=--max-old-space-size=1024
      - UV_THREADPOOL_SIZE=8
    secrets:
      - discord_token
      - api_key
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    volumes:
      - monitor_logs:/app/logs
    build:
      context: ./livestream-link-monitor
      target: production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "5"
        labels: "service=livestream-monitor"

  # Livesheet Updater - Production
  livesheet-updater:
    image: ${DOCKER_REGISTRY:-ghcr.io}/streamwall/livesheet-updater:${UPDATER_VERSION:-latest}
    restart: always
    profiles: ["production"]
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - STREAMSOURCE_API_KEY_FILE=/run/secrets/api_key
      - STREAMSOURCE_API_URL=http://streamsource:3000/api/v1
      - NODE_OPTIONS=--max-old-space-size=512
    secrets:
      - api_key
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    volumes:
      - updater_logs:/app/logs
    build:
      context: ./livesheet-updater
      target: production
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 300s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "5"
        labels: "service=livesheet-updater"

  # Optional: Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    restart: always
    profiles: ["monitoring"]
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    restart: always
    profiles: ["monitoring"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_INSTALL_PLUGINS=redis-datasource
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

# Production networks
networks:
  default:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"

# Secrets management
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  secret_key_base:
    file: ./secrets/secret_key_base.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  api_key:
    file: ./secrets/api_key.txt
  discord_token:
    file: ./secrets/discord_token.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# Production volumes
volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  streamsource_storage:
    driver: local
  streamsource_log:
    driver: local
  streamsource_tmp:
    driver: local
  monitor_logs:
    driver: local
  updater_logs:
    driver: local
  nginx_certs:
    driver: local
  nginx_logs:
    driver: local
  acme_challenge:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local